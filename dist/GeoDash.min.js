var _ezoop = window.ezoop, ezoop = function() {};

ezoop.noConflict = function() {
    return window.ezoop = _ezoop, this;
}, window.ezoop = ezoop, ezoop.ExtendedClass = function(t, i) {
    return ezoop.Class(t, i);
}, ezoop.BaseClass = function(t) {
    return ezoop.Class(null, t);
}, ezoop.Class = function(t, i) {
    var e = null, s = ezoop.Class;
    return null == t || "undefined" == typeof t ? (e = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, e.prototype = i) : (e = function() {
        if ("undefined" != typeof t.prototype) {
            var i = t.prototype.initialize;
            "function" == typeof i && i.apply(this, arguments);
        }
        var e = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof e && e.apply(this, arguments);
    }, s.inheritPrototype(e, t), s.augmentPrototype(e.prototype, i)), e;
}, ezoop.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, ezoop.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var s = i[e];
            void 0 !== s && (t[e] = s);
        }
        var o = "function" == typeof window.Event && i instanceof window.Event;
        !o && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
};

var oldGeoDash = window.GeoDash, GeoDash = function() {};

GeoDash.version = "0.1-dev", GeoDash.noConflict = function() {
    return window.GeoDash = oldGeoDash, this;
}, window.GeoDash = GeoDash, GeoDash.Class = function(t) {
    var i = t, e = i.extend, s = null, o = GeoDash.Class;
    return null == e || "undefined" == typeof e ? (s = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, s.prototype = i) : (s = function() {
        if ("undefined" != typeof e.prototype) {
            var t = e.prototype.initialize;
            "function" == typeof t && t.apply(this, arguments);
        }
        var i = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof i && i.apply(this, arguments);
    }, o.inheritPrototype(s, e), o.augmentPrototype(s.prototype, i)), s;
}, GeoDash.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, GeoDash.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var s = i[e];
            void 0 !== s && (t[e] = s);
        }
        var o = "function" == typeof window.Event && i instanceof window.Event;
        !o && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
}, GeoDash.Chart = ezoop.BaseClass({
    className: "Chart",
    initialize: function(t, i) {
        this.el = t, this.options = {}, this.setOptions(i), this.makeTitle(), this.setUpChart(), 
        this.drawChart();
    },
    setOptions: function(t) {
        for (var i in this.defaults) this.defaults.hasOwnProperty(i) && void 0 === t[i] && (t[i] = this.defaults[i]);
        this.options = t;
    },
    setUpChart: function() {
        d3.select(this.el).style("position", "relative");
    },
    drawChart: function() {},
    update: function() {},
    makeTitle: function() {
        if (this.options.title) {
            var t = '<div class="geodash-title">';
            t += this.options.title, t += "</div>", d3.select(this.el).html(t);
        }
    }
}), GeoDash.BarChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChart",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        percent: !1,
        title: !1,
        roundRadius: 3,
        highlight: !1,
        verticalX: !1,
        invert: !1
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 40
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.formatPercent = d3.format(".0%"), 
        this.formatLarge = d3.format("s"), this.formatComma = d3.format(","), this.x = d3.scale.ordinal().rangeRoundBands([ 0, this.width ], .05, .5), 
        this.y = d3.scale.linear().range([ this.height, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickFormat(function(t) {
            return t;
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").ticks(4).tickSize(-1 * this.width, 0, 0).tickFormat(function(i) {
            return t.formatLarge(i);
        }), this.options.percent && this.yAxis.tickFormat(this.formatPercent), this.svg = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "barchart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")"), 
        this.svg.append("g").attr("class", "y axis"), this.svg.append("g").attr("class", "bars"), 
        d3.select(t.el).append("div").attr("class", "hoverbox"), this.xAxisElement = this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")");
        var i = d3.rgb(d3.select(this.el).style("background-color")).toString();
        console.log(i), this.xAxisElement.append("rect").attr("width", this.width).attr("height", this.height).attr("transform", "translate(0,1)").style("fill", i);
    },
    update: function(t) {
        var i = this, e = this.options.y, s = this.options.x;
        t.forEach(function(t) {
            t[e] = +t[e];
        }), this.color = d3.scale.ordinal().range(this.options.barColors), this.x.domain(t.map(function(t) {
            return t[s];
        })), this.y.domain([ 0, d3.max(t, function(t) {
            return t[e];
        }) ]), this.svg.select(".y.axis").call(this.yAxis);
        var o = this.svg.select(".bars").selectAll(".bar").data(t);
        o.transition().attr("x", function(t) {
            return i.x(t[s]);
        }).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("width", i.x.rangeBand()).attr("height", function(t) {
            return i.height - i.y(t[e]) + i.options.roundRadius;
        }).style("fill", function(t) {
            return i.color(t[s]);
        }).style("fill-opacity", function(t) {
            return t[s] == i.options.highlight ? 1 : i.options.opacity;
        }), o.enter().append("rect").attr("class", "bar").attr("id", function(t) {
            return t[s];
        }).attr("x", function(t) {
            return i.x(t[s]);
        }).attr("width", i.x.rangeBand()).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("rx", i.options.roundRadius).attr("height", function(t) {
            return i.height - i.y(t[e]) + i.options.roundRadius;
        }).style("fill-opacity", function(t) {
            return t[s] == i.options.highlight ? 1 : i.options.opacity;
        }).style("fill", function(t) {
            return i.color(t[s]);
        }).on("mouseover", function(t) {
            d3.select(this).style("fill-opacity", 1), d3.select(i.el).select(".hoverbox").html(t[s] + ": " + (i.options.percent ? i.formatPercent(t[e]) : i.formatComma(t[e]))), 
            d3.select(i.el).select(".hoverbox").transition().style("display", "block");
        }).on("mouseout", function(t) {
            var e = i.options.opacity;
            t[s] == i.options.highlight && (e = 1), d3.select(this).style("fill-opacity", e), 
            d3.select(i.el).select(".hoverbox").transition().style("display", "none");
        }), o.exit().remove(), this.options.drawX ? (this.xAxisElement.call(this.xAxis), 
        this.options.verticalX && (this.xAxisElement.selectAll("line").style("display", "none"), 
        this.xAxisElement.selectAll("g").attr("transform", function() {
            var t = d3.select(this).attr("transform");
            t = t.replace("translate(", ""), t = t.replace(")", "");
            var i = t.split(","), e = i[0] - 8, s = -12, o = "translate(" + e + "," + s + ")";
            return o;
        }), this.xAxisElement.selectAll("text").style("text-anchor", "start").style("fill", "#333").attr("dx", "-.8em").attr("dy", ".15em").attr("transform", function() {
            return "rotate(-90)";
        }))) : this.xAxisElement.selectAll("g").remove();
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
}), GeoDash.TableChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "TableChart",
    defaults: {},
    initialize: function() {},
    drawChart: function() {
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 40
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.formatPercent = d3.format(".0%"), 
        this.formatLarge = d3.format("s"), this.formatComma = d3.format(","), this.table = d3.select(this.el).append("table").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "table table-condensed table-bordered tablechart-svg"), 
        this.tbody = this.table.append("tbody");
    },
    update: function(t) {
        var i = this, e = this.tbody.selectAll("tr").data(t);
        e.enter().append("tr"), e.exit().remove();
        var s = e.selectAll("td").data(function(t) {
            return i.options.columns.map(function(i) {
                return {
                    column: i,
                    value: t[i]
                };
            });
        });
        return s.transition().text(function(t) {
            var e = "";
            return e = parseFloat(t.value) > 0 && parseFloat(t.value) <= 1 && i.options.percent ? i.formatPercent(t.value) : isNaN(parseFloat(t.value)) ? t.value : i.formatComma(t.value);
        }), s.enter().append("td").text(function(t) {
            var e = "";
            return e = parseFloat(t.value) > 0 && parseFloat(t.value) <= 1 && i.options.percent ? i.formatPercent(t.value) : isNaN(parseFloat(t.value)) ? t.value : i.formatComma(t.value);
        }), s.exit().remove(), this;
    }
}), GeoDash.LineChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "LineChart",
    defaults: {
        x: "x",
        y: "y",
        width: "auto",
        height: "auto",
        colors: [ "#d80000", "#006200" ],
        interpolate: "monotone",
        dotRadius: 3,
        title: !1,
        opacity: .5,
        strokeWidth: 2,
        axisLabels: !1,
        xInterval: "auto"
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 10,
            right: 20,
            bottom: 30,
            left: 50
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.formatComma = d3.format(",f.2"), 
        this.formatLarge = d3.format("s"), this.x = d3.time.scale().range([ 0, this.width ]), 
        this.y = d3.scale.linear().range([ this.height, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).tickSize(-1 * this.height).tickPadding(5).orient("bottom"), 
        this.yAxis = d3.svg.axis().scale(this.y).tickSize(-1 * this.width).tickPadding(10).orient("left").tickFormat(function(i) {
            return t.formatLarge(i);
        }), this.color = d3.scale.ordinal().range(this.options.colors), this.line = d3.svg.line().interpolate(this.options.interpolate).x(function(i) {
            return t.x(i.date);
        }).y(function(i) {
            return t.y(i.value);
        });
        var i = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "linechart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        i.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
        i.append("g").attr("class", "y axis").call(this.yAxis), t.options.axisLabels && i.select(".y.axis").append("text").attr("class", "axis-label").attr("transform", "rotate(-90)").attr("y", 0 - this.margin.left).attr("x", 0 - this.height / 2).attr("dy", "1em").style("text-anchor", "middle").text(t.options.yAxisLabel), 
        d3.select(t.el).append("div").attr("class", "hoverbox");
    },
    hoverOnDot: function(t, i, e) {
        var s = this, o = this.formatComma(t.value), a = 55 + this.x(t.date), n = 45 + this.y(t.value);
        d3.select(e).transition().attr("r", this.options.dotRadius + 3);
        var r = d3.select(".line")[0][0].getBBox().width;
        this.x(t.date) >= r && (a -= 55), d3.select(s.el).select(".hoverbox").style("right", "auto"), 
        d3.select(s.el).select(".hoverbox").style("left", a + "px"), d3.select(s.el).select(".hoverbox").style("top", n + "px"), 
        d3.select(s.el).select(".hoverbox").html(o), d3.select(s.el).select(".hoverbox").transition().style("display", "inline");
    },
    hoverOffDot: function(t, i, e) {
        var s = this;
        d3.select(s.el).select(".hoverbox").transition().style("display", "none"), d3.select(e).transition().attr("r", this.options.dotRadius);
    },
    setYAxisLabel: function(t) {
        var i = this;
        d3.select(i.el).select(".y.axis .axis-label").text(t);
    },
    update: function(t) {
        var i = this;
        this.color.domain(d3.keys(t[0]).filter(function(t) {
            return t !== i.options.x;
        }));
        for (var e = this.color.domain().map(function(e) {
            return {
                name: e,
                values: t.map(function(t) {
                    return {
                        date: t[i.options.x],
                        value: +t[e]
                    };
                })
            };
        }), s = 0; s < e.length; s++) {
            for (var o = [], a = 0; a < e[s].values.length; a++) {
                var n = e[s].values[a].value;
                isNaN(n) || o.push(e[s].values[a]);
            }
            e[s].values = o;
        }
        this.x.domain(d3.extent(t, function(t) {
            return t[i.options.x];
        })), this.y.domain([ d3.min(e, function(t) {
            return d3.min(t.values, function(t) {
                return t.value;
            });
        }), d3.max(e, function(t) {
            return d3.max(t.values, function(t) {
                return t.value;
            });
        }) ]);
        var r = this.y.domain();
        this.y.domain([ r[0] - .1 * r[0], r[1] + .1 * r[1] ]);
        var h = d3.select(this.el + " svg g");
        "auto" == i.options.xInterval ? this.xAxis.ticks(t.length) : this.xAxis.ticks(i.options.xInterval), 
        h.select(".y.axis").transition().call(this.yAxis), h.select(".x.axis").transition().call(this.xAxis);
        var l = function(t, i) {
            return 10 * i;
        }, d = h.selectAll(".line").data(e);
        d.transition().duration(500).delay(l).attr("d", function(t) {
            return i.line(t.values);
        }), d.enter().append("path").attr("class", "line").attr("d", function(t) {
            return i.line(t.values);
        }).style("stroke", function(t) {
            return i.color(t.name);
        }).style("stroke-width", i.options.strokeWidth).style("stroke-opacity", i.options.opacity);
        for (var s = 0; s < e.length; s++) {
            var o = e[s].values, c = h.selectAll(".dotset" + s).data(o);
            c.transition().duration(500).delay(l).attr("data", function(t) {
                return t.value;
            }).attr("cx", function(t) {
                return i.x(t[i.options.x]);
            }).attr("cy", function(t) {
                return i.y(t.value);
            }), c.enter().append("circle").attr("class", "dot dotset" + s).attr("r", this.options.dotRadius).style("fill", function() {
                return i.color(e[s].name);
            }).style("fill-opacity", i.options.opacity).attr("data", function(t) {
                return t.value;
            }).on("mouseover", function(t, e) {
                i.hoverOnDot(t, e, this);
            }).on("mouseout", function(t, e) {
                i.hoverOffDot(t, e, this);
            }).attr("cx", function(t) {
                return i.x(t[i.options.x]);
            }).attr("cy", function(t) {
                return i.y(t.value);
            }), c.exit().remove();
        }
    }
}), GeoDash.PieChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "PieChart",
    defaults: {
        label: "label",
        value: "value",
        colors: [ "#f00", "#0f0", "#00f" ],
        innerRadius: 10,
        opacity: 1,
        drawX: !1,
        drawY: !1,
        title: !1,
        padding: 10,
        legend: !1,
        hover: !1
    },
    initialize: function() {},
    setColors: function(t) {
        this.color = d3.scale.ordinal().range(t);
    },
    drawChart: function() {
        var t = this;
        this.width = "auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width, 
        this.height = "auto" === this.options.height || void 0 === this.options.width ? parseInt(d3.select(this.el).style("height")) : this.options.height, 
        this.width = this.width - 2 * this.options.padding, this.height = this.height - 2 * this.options.padding, 
        this.options.title && (this.height = this.height - 21), this.radius = Math.min(this.width, this.height) / 2.2, 
        this.color = d3.scale.ordinal().range(this.options.colors), this.x = d3.scale.ordinal().range([ 0, this.width - 2 ]), 
        this.y = d3.scale.linear().range([ this.height - 2, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.arc = d3.svg.arc().outerRadius(this.radius).innerRadius(this.options.innerRadius), 
        this.pie = d3.layout.pie().sort(null).value(function(i) {
            return i[t.options.value];
        }), this.formatHover = d3.format(",.0f"), this.formatPercent = d3.format(".2f"), 
        this.svg = d3.select(this.el).append("svg").attr("width", this.width).attr("height", this.height).attr("class", "piechart-svg").append("g").attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")"), 
        this.options.hover && d3.select(this.el).append("div").attr("class", "hoverbox"), 
        this.options.drawX && (this.svg.append("g").attr("class", "x axis").attr("transform", "translate(" + -1 * (this.width / 2) + "," + 0 + ")").call(this.xAxis), 
        this.svg.select(".x.axis").selectAll(".tick").attr("transform", "translate(0,-5)")), 
        this.options.drawY && (this.svg.append("g").attr("class", "y axis").attr("transform", "translate(0," + -1 * (this.height / 2) + ")").call(this.yAxis), 
        this.svg.select(".y.axis").selectAll(".tick").attr("transform", "translate(5,0)")), 
        this.options.legend && d3.select(this.options.legend).append("svg");
    },
    update: function(t) {
        var i = this;
        i.total = 0, t.forEach(function(t) {
            t[i.options.value] = +t[i.options.value], i.total += +t[i.options.value];
        }), this.x.domain([ 0, 1 ]), this.y.domain([ 0, 1 ]), this.xAxis.tickValues([ 0, 1 ]), 
        this.yAxis.tickValues([ 0, 1 ]), this.options.drawX && svg.select(".x.axis").transition().call(this.xAxis), 
        this.options.drawY && svg.select(".y.axis").transition().call(this.yAxis);
        var e = this.svg.selectAll(".arc").data(this.pie(t));
        if (e.select("path").transition().style("fill", function(t) {
            return i.color(t.data[i.options.label]);
        }).attr("d", this.arc), e.enter().append("g").attr("class", "arc").append("path").attr("d", this.arc).style("fill", function(t) {
            return i.color(t.data[i.options.label]);
        }).style("fill-opacity", this.options.opacity).on("mouseover", function(t) {
            if (d3.select(this).style("fill-opacity", 1), i.options.hover) {
                var e = t.data[i.options.label], s = i.formatHover(t.value), o = i.formatPercent(100 * (t.value / i.total));
                d3.select(i.el).select(".hoverbox").html(e + ": " + s + " (" + o + "%)"), d3.select(i.el).select(".hoverbox").style("display", "block");
            }
        }).on("mouseout", function() {
            d3.select(i.el).select(".hoverbox").html(""), d3.select(i.el).select(".hoverbox").style("display", "none"), 
            d3.select(this).style("fill-opacity", i.options.opacity);
        }), this.options.legend) {
            parseInt(d3.select(this.options.legend).style("width"));
            var s = {
                width: 10,
                height: 10,
                padding: 5
            }, o = d3.select(this.options.legend).select("svg"), a = o.selectAll(".legend-item").data(this.color.domain().slice());
            a.select(".legend-item").select("text").text(function(t) {
                return t;
            });
            var n = a.enter().append("g").attr("class", "legend-item").attr("transform", function(t, i) {
                return "translate(0," + i * (s.height + s.padding) + ")";
            });
            n.append("rect").attr("x", 0).attr("width", s.width).attr("height", s.height).style("fill", this.color), 
            n.append("text").attr("x", s.width + s.padding).attr("y", 4).attr("dy", ".35em").style("text-anchor", "start").text(function(t) {
                return t;
            });
        }
    }
}), GeoDash.BarChartHorizontal = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChartHorizontal",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        drawY: !1,
        percent: !1,
        title: !1,
        roundRadius: 3,
        highlight: !1,
        verticalX: !1,
        invert: !1
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 10
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.formatPercent = d3.format(".0%"), 
        this.formatLarge = d3.format("s"), this.formatComma = d3.format(","), this.x = d3.scale.linear().range([ 0, this.width ]), 
        this.y = d3.scale.ordinal().rangeRoundBands([ 0, this.height ], .05), this.xAxis = d3.svg.axis().scale(this.x).orient("top").tickSize(-1 * this.height, 0, 0).tickFormat(function(i) {
            return t.formatLarge(i);
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickSize(0, 0, 0).tickFormat(function(t) {
            return t;
        }), this.options.percent && this.xAxis.tickFormat(this.formatPercent), this.svg = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "barchart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")"), 
        this.xAxisElement = this.svg.append("g").attr("class", "x axis"), this.svg.append("g").attr("class", "bars"), 
        this.yAxisElement = this.svg.append("g").attr("class", "y axis"), d3.select(t.el).append("div").attr("class", "hoverbox");
    },
    update: function(t) {
        var i = this, e = this.options.y, s = this.options.x;
        t.forEach(function(t) {
            t[e] = +t[e];
        }), this.color = d3.scale.ordinal().range(this.options.barColors);
        var o = d3.extent(t, function(t) {
            return t[e];
        });
        o[0] < 0 ? this.x.domain(o) : this.x.domain([ 0, o[1] ]), this.y.domain(t.map(function(t) {
            return t[s];
        }));
        var a = this.svg.select(".bars").selectAll(".bar").data(t);
        a.transition().attr("id", function(t) {
            return t[s];
        }).attr("x", function(t) {
            var s = i.x(Math.min(0, t[e]));
            return s >= i.x(0) && (s -= i.options.roundRadius), s;
        }).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("width", function(t) {
            var s = Math.abs(i.x(t[e]) - i.x(0));
            return s += i.options.roundRadius;
        }).attr("height", i.y.rangeBand()).attr("rx", i.options.roundRadius).style("fill", function(t) {
            return i.color(t[s]);
        }).style("fill-opacity", function(t) {
            return t[s] == i.options.highlight ? 1 : i.options.opacity;
        }), a.enter().append("rect").attr("class", "bar").attr("id", function(t) {
            return t[s];
        }).attr("x", function(t) {
            var s = i.x(Math.min(0, t[e]));
            return s >= i.x(0) && (s -= i.options.roundRadius), s;
        }).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("width", function(t) {
            var s = Math.abs(i.x(t[e]) - i.x(0));
            return s += i.options.roundRadius;
        }).attr("rx", i.options.roundRadius).attr("height", i.y.rangeBand()).style("fill-opacity", function(t) {
            return t[s] == i.options.highlight ? 1 : i.options.opacity;
        }).style("fill", function(t) {
            return i.color(t[s]);
        }).on("mouseover", function(t) {
            d3.select(this).style("fill-opacity", 1), d3.select(i.el).select(".hoverbox").html(t[s] + ": " + (i.options.percent ? i.formatPercent(t[e]) : i.formatComma(t[e]))), 
            d3.select(i.el).select(".hoverbox").transition().style("display", "block");
        }).on("mouseout", function(t) {
            var e = i.options.opacity;
            t[s] == i.options.highlight && (e = 1), d3.select(this).style("fill-opacity", e), 
            d3.select(i.el).select(".hoverbox").transition().style("display", "none");
        }), a.exit().remove();
        var n = d3.rgb(d3.select(this.el).style("background-color")).toString(), r = this.svg.select(".bars").selectAll(".hider").data(t);
        r.transition().attr("width", 2 * i.options.roundRadius).attr("height", i.y.rangeBand()).attr("x", i.x(0)).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("transform", function(t) {
            var s = i.x(Math.min(0, t[e]));
            return s < i.x(0) ? "translate(0, 0)" : "translate(" + -1 * 2 * i.options.roundRadius + ", 0)";
        }), r.enter().append("rect").attr("class", "hider").attr("width", 2 * i.options.roundRadius).attr("height", i.y.rangeBand()).attr("x", i.x(0)).attr("y", function(t) {
            return i.y(t[e]);
        }).style("fill-opacity", 1).style("fill", n).attr("transform", function(t) {
            var s = i.x(Math.min(0, t[e]));
            return s < i.x(0) ? "translate(0, 0)" : "translate(" + -1 * 2 * i.options.roundRadius + ", 0)";
        }), r.exit().remove(), this.yAxisElement.append("line").attr("class", "line").attr("x1", i.x(0)).attr("x2", i.x(0)).attr("y2", i.height), 
        this.options.drawX ? this.xAxisElement.call(this.xAxis) : this.xAxisElement.selectAll("g").remove(), 
        this.options.drawY ? (this.y.domain(t.map(function(t) {
            return t[s];
        })), this.yAxisElement.call(this.yAxis), this.yAxisElement.selectAll("text").style("text-anchor", "start").style("fill", function() {
            return i.options.invert ? "#fff" : "#333";
        }).attr("x", "2").attr("y", "0")) : this.yAxisElement.selectAll("g").remove();
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
});